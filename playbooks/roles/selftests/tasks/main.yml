---
- name: Import optional extra_args file
  ansible.builtin.include_vars: "{{ item }}"
  ignore_errors: true
  with_first_found:
    - files:
        - "../extra_vars.yml"
        - "../extra_vars.yaml"
        - "../extra_vars.json"
      skip: true
  tags: vars

# Distro specific
# Note: if using 9p we'll install the selftests dependencies on both
# the target node and the localhost because we first need to build
# the target selftests for the nodes and then actually use them.
- name: Install dependencies
  ansible.builtin.include_tasks: install-deps/main.yml
- name: Install dependencies to build Linux selftests on host
  tags: ["deps"]
  run_once: true
  ansible.builtin.import_tasks: install-deps/main.yml
  delegate_to: localhost
  when:
    - bootlinux_9p|bool

- name: Check if this node is in charge of running kernel or userspace tests
  vars:
    is_selftest_xarray: "{{ 'xarray' in ansible_host }}"
    is_selftest_maple: "{{ 'maple' in ansible_host }}"
    is_selftest_vma: "{{ 'vma' in ansible_host }}"
  ansible.builtin.set_fact:
    selftest_xarray: "{{ is_selftest_xarray }}"
    selftest_maple: "{{ is_selftest_maple }}"
    selftest_vma: "{{ is_selftest_vma }}"
  tags: ["vars"]

- name: Check if this node is in charge of userspace tests
  vars:
  ansible.builtin.set_fact:
    selftest_userspace: "{{ selftest_xarray or selftest_maple or selftest_vma }}"
  tags: ["vars"]

- name: Check if this node is in charge of running kernel tests
  ansible.builtin.set_fact:
    selftest_kernelspace: "{{ not selftest_userspace }}"
  tags: ["vars"]

- name: Debug kernelspace / userspace tests
  ansible.builtin.debug:
    msg: |
      Host: {{ ansible_host }}
      - selftest_xarray: {{ selftest_xarray }}
      - selftest_maple: {{ selftest_maple }}
      - selftest_vma: {{ selftest_vma }}
      - selftest_kernelspace: {{ selftest_kernelspace }}
      - selftest_userspace: {{ selftest_userspace }}
  tags: ["run_tests"]

- name: Fail if both userspace and kernelspace are True
  ansible.builtin.fail:
    msg: "Both selftest_userspace and selftest_kernelspace are True for host {{ ansible_host }}. This is not expected."
  when: selftest_userspace and selftest_kernelspace
  tags: ["vars"]

- name: Fail if both userspace and kernelspace are False
  ansible.builtin.fail:
    msg: "Both selftest_userspace and selftest_kernelspace are False for host {{ ansible_host }}. This is not expected."
  when: not selftest_userspace and not selftest_kernelspace
  tags: ["vars"]

- name: Fail if selftest_kernelspace is true on incorrect host
  ansible.builtin.fail:
    msg: "Both selftest_userspace and selftest_kernelspace are True for host {{ ansible_host }}. This is not expected."
  when: (selftest_kernelspace and (selftest_xarray or selftest_maple or selftest_vma))
  tags: ["vars"]

- name: Remove /lib/udev/rules.d/50-firmware.rules
  tags: ["selftests", "deps"]
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.file:
    path: "/lib/udev/rules.d/50-firmware.rules"
    state: absent
  when:
    - selftests_section_firmware|bool

- name: Create /lib/firmware directory
  tags: ["selftests", "deps"]
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.file:
    path: "/lib/firmware"
    state: directory
    mode: "0755"
  when:
    - selftests_section_firmware|bool

- ansible.builtin.include_role:
    name: create_data_partition
  tags: ["data_partition"]

- name: Get nproc
  ansible.builtin.command: "{{ num_jobs }}"
  tags: ["selftests", "build"]
  register: nproc

- name: Get nproc on host
  ansible.builtin.command: "{{ num_jobs }}"
  tags: ["selftests", "build"]
  register: nproc_host
  when:
    - bootlinux_9p|bool

- name: Set the target selftest
  vars:
    all_tests: "{{ play_hosts | join(' ') | regex_replace('selftests-') | regex_replace(kdevops_host_prefix + '-') | regex_replace('-dev') | regex_replace('-', '_')
      }}"
  ansible.builtin.set_fact:
    target_selftest: "{{ ansible_host | regex_replace('selftests-') | regex_replace(kdevops_host_prefix + '-') | regex_replace('-dev') | regex_replace('-', '_') }}"
    all_selftest_targets: "{{ all_tests | regex_replace('maple') | regex_replace('xarray') }}"
  tags: ["selftests", "vars"]

# We split building selftestss for two reasons because we can have the Linux
# build out of the node / guest
#
# So there are two steps to installing selftests:
# 1) building selftests
# 2) installing built selftests
- name: Build selftests
  tags: ["selftests", "build"]
  community.general.make:
    chdir: "{{ selftests_data }}"
    jobs: "{{ nproc.stdout }}"
    params:
      TARGETS: "{{ target_selftest }}"
      FORCE_TARGETS: "1"
  when:
    - not bootlinux_9p|bool
    - selftests_build_selftests_dir|bool

- name: Build selftests
  tags: ["selftests", "build"]
  community.general.make:
    chdir: "{{ selftests_data }}"
    jobs: "{{ nproc.stdout }}"
    params:
      TARGETS: "{{ target_selftest }}"
      FORCE_TARGETS: "1"
  when:
    - not bootlinux_9p|bool
    - selftests_build_selftests_dir|bool

- name: Build radix tree tools/testing/radix-tree
  tags: ["selftests", "build"]
  community.general.make:
    chdir: "{{ target_linux_dir_path }}/tools/testing/radix-tree"
    jobs: "{{ nproc.stdout }}"
  when:
    - not bootlinux_9p|bool
    - selftests_build_radix_tree|bool

# We build only what we need. This means if building on the host we peg all
# the targets we want together so we can build all of them.
# We use FORCE_TARGETS=1 so to ensure make will fail if a build target failed.
#
# Note that some targets will not fail with an error if dependencies are not
# met.. so you should ensure that build-deps are met before adding a new target
- name: Build selftests on host on {{ selftests_data_9p }}
  tags: ["selftests", "build"]
  community.general.make:
    chdir: "{{ selftests_data_9p }}"
    jobs: "{{ nproc_host.stdout }}"
    params:
      TARGETS: "{{ all_selftest_targets }}"
      FORCE_TARGETS: "1"
  run_once: true
  delegate_to: localhost
  when:
    - bootlinux_9p|bool
    - selftests_build_selftests_dir|bool

- name: Build radix tree tools/testing/radix-tree on host
  tags: ["selftests", "build"]
  ansible.builtin.command: "make -j{{ nproc.stdout }}"
  args:
    chdir: "{{ bootlinux_9p_host_path }}/tools/testing/radix-tree"
  delegate_to: localhost
  run_once: true
  when:
    - bootlinux_9p|bool
    - selftests_build_radix_tree|bool

- name: Build VMA tools/testing/vma
  tags: ["selftests", "build"]
  community.general.make:
    chdir: "{{ target_linux_dir_path }}/tools/testing/vma"
    jobs: "{{ nproc.stdout }}"
  when:
    - not bootlinux_9p|bool
    - selftest_vma|bool

- name: Build VMA tools/testing/vma on host
  tags: ["selftests", "build"]
  ansible.builtin.command: "make -j{{ nproc.stdout }}"
  args:
    chdir: "{{ bootlinux_9p_host_path }}/tools/testing/vma"
  delegate_to: localhost
  run_once: true
  when:
    - bootlinux_9p|bool
    - selftest_vma|bool

# We use the target node only, not the host as if you've enaabled
# 9p the path will be available and everything will have been built
# for us.
- name: Install selftests
  tags: ["selftests", "build"]
  become: true
  become_method: sudo
  become_flags: "su - -c"
  community.general.make:
    chdir: "{{ selftests_data }}"
    jobs: "{{ nproc.stdout }}"
    target: install
    params:
      O: "{{ selftests_data_target }}"
      TARGETS: "{{ target_selftest }}"
  when:
    - selftest_kernelspace|bool

- name: Reboot system before our test so we know everything is sane
  tags: ["selftests", "run_tests", "reboot"]
  become: true
  become_method: sudo
  ansible.builtin.reboot:
    post_reboot_delay: 10
  when:
    - not selftests_skip_reboot|bool

- name: Set the path to selftests workflow
  ansible.builtin.set_fact:
    selftests_workflow_target: "../workflows/selftests/"
  tags: ["selftests", "run_tests", "copy_results", "prior_run", "print_results", "augment_expunge_list"]

- name: Get used target kernel version
  tags: ["selftests", "vars", "copy_results", "augment_expunge_list"]
  ansible.builtin.command: "uname -r"
  register: uname_cmd

- name: Store last kernel variable
  ansible.builtin.set_fact:
    last_kernel: "{{ uname_cmd.stdout_lines | regex_replace('\\]') | regex_replace('\\[') | replace(\"'\",'') }}"
  tags: ["selftests", "vars", "copy_results", "augment_expunge_list"]
  run_once: true

- name: Set the path where we collect our selftests results
  ansible.builtin.set_fact:
    selftests_results_full_path: "{{ topdir_path }}/workflows/selftests/results/"
    selftests_workflow_dir: "../workflows/selftests"
    selftests_results_target: "../workflows/selftests/results/last-run/{{ last_kernel }}"
  tags: ["selftests", "run_tests", "copy_results", "prior_run", "print_results", "augment_expunge_list", "vars"]

- name: Print uname for each host
  tags: ["selftests", "run_tests"]
  ansible.builtin.debug: var=ansible_kernel
- name: Load configfs module
  tags: ["selftests", "run_tests", "configfs"]
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.command: "modprobe configfs"
  when:
    - kdevops_run_selftests|bool

- name: Clear out old results directory on target hosts
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.file:
    state: absent
    path: "{{ selftests_data_target }}/results/"
  tags: ["selftests", "run_tests", "clean_results"]

- name: Hint to watchdog tests are about to kick off
  ansible.builtin.file: path="{{ selftests_workflow_target }}/.begin" state=touch
  delegate_to: localhost
  tags: ["selftests", "run_tests"]
  when:
    - kdevops_run_selftests|bool
  run_once: true

- name: Enable low-level messages on console
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.command: sysctl kernel.printk="8 8 1 7"
- name: Stop selftests if we're debbugging
  ansible.builtin.meta: end_play
  tags: ["selftests", "run_tests", "vars"]
  when:
    - selftests_skip_run|bool

- name: Set variable we'd use for an override for a timeout for this test
  vars:
    selftest_name: "{{ ansible_host | regex_replace('^' + kdevops_host_prefix + '-', '') }}"
  ansible.builtin.set_fact:
    selftest_timeout_variable: "{{ 'selftests_section_' + selftest_name + '_timeout' }}"
  tags: ["vars"]

- name: Check if selftest timeout variable exists and is not empty
  ansible.builtin.set_fact:
    selftest_timeout_argument: "{{ '--override-timeout ' + (lookup('vars', selftest_timeout_variable, default='') | string) }}"
  when:
    - selftest_kernelspace|bool
    - lookup('vars', selftest_timeout_variable, default='') != ""
  tags: ["vars"]

- name: Log timeout argument used
  ansible.builtin.debug:
    msg: "{{ ansible_host }} could use {{ selftest_timeout_variable }} : using timeout argument {{ selftest_timeout_argument }}"
  tags: ["vars"]
  when:
    - selftest_kernelspace|bool

- name: Run kernel-side tests for special tests not in selftests
  tags: ["selftests", "run_tests"]
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.command: "{{ command_to_run }}"
  args:
    chdir: "{{ target_linux_dir_path }}/tools/testing/radix-tree"
  register: selftests_module_out
  when:
    - kdevops_run_selftests|bool
    - selftests_build_radix_tree|bool
    - selftest_userspace|bool
    - not selftest_vma|bool
  vars:
    command_to_run: >
      {%- if selftest_xarray  -%}
      modprobe test_xarray
      {%- elif selftest_maple -%}
      modprobe test_maple_tree
      {%- else -%}
      echo missing command
      {%- endif -%}

- name: Run userspace selftests
  tags: ["selftests", "run_tests"]
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.command: "{{ command_to_run }}"
  args:
    chdir: "{{ test_target_dir }}"
  register: selftests_userspace_out
  when:
    - kdevops_run_selftests|bool
    - (selftests_build_radix_tree|bool and selftest_userspace|bool and not selftest_vma|bool) or selftest_vma|bool
  vars:
    test_target_dir: >-
      {%- if selftest_vma -%}
      {{ target_linux_dir_path }}/tools/testing/vma
      {%- else -%}
      {{ target_linux_dir_path }}/tools/testing/radix-tree
      {%- endif -%}
    command_to_run: >-
      {%- if selftest_vma -%}
      ./vma
      {%- elif selftest_xarray -%}
      ./xarray && modprobe test_xarray
      {%- elif selftest_maple -%}
      ./maple && modprobe test_maple_tree
      {%- else -%}
      echo missing command
      {%- endif -%}

- name: Run kernelspace selftests
  tags: ["selftests", "run_tests"]
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.command: "./run_kselftest.sh -s {{ selftest_timeout_argument }}"
  args:
    chdir: "{{ selftests_workdir }}"
  register: selftests_out
  when:
    - kdevops_run_selftests|bool
    - selftest_kernelspace|bool

- name: Create empty directory for log collection for non-standard tests
  tags: ["selftests", "run_tests"]
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.file:
    path: "{{ selftests_workdir }}"
    state: directory
    mode: "0755"
    owner: root
    group: root

- name: Remove watchdog hint that tests have started
  ansible.builtin.file: path="{{ selftests_workflow_target }}/.begin" state=absent
  delegate_to: localhost
  tags: ["selftests", "run_tests"]
  when:
    - kdevops_run_selftests|bool
  run_once: true

- name: Clean up our localhost results/last-run directory
  ansible.builtin.file: path="{{ selftests_results_target }}/{{ item }}" state=absent
  delegate_to: localhost
  with_items:
    - "last-run"
  loop_control:
    label: "{{ item }}"
  run_once: true
  tags: ["selftests", "copy_results", "clean_local_results"]

- name: Create empty last-run directory
  ansible.builtin.file: path="{{ selftests_results_target }}/" state=directory
  delegate_to: localhost
  run_once: true
  tags: ["selftests", "copy_results", "clean_local_results"]

- name: Document used target kernel version
  ansible.builtin.shell: echo {{ last_kernel }} > {{ selftests_results_target }}/last-kernel.txt
  delegate_to: localhost
  tags: ["selftests", "copy_results", "augment_expunge_list"]
  run_once: true

- name: Gather kernel logs from each node
  tags: ["selftests", "copy_results"]
  become: true
  become_method: sudo
  ansible.builtin.command: journalctl -k
  register: journal_cmd

- name: Save kernel logs to local file per node
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.copy:
    content: "{{ journal_cmd.stdout }}"
    dest: "{{ selftests_workdir }}/dmesg.log"
  tags: ["selftests", "copy_results"]

- name: Save selftest TAP output
  tags: ["selftests", "run_tests"]
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.copy:
    content: "{{ selftests_out.stdout_lines|join('\n') }}"
    dest: "{{ selftests_workdir}}/tap.log"
  when:
    - kdevops_run_selftests|bool
    - selftest_kernelspace|bool

- name: Save userspace test output
  tags: ["selftests", "run_tests"]
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.copy:
    content: "{{ selftests_userspace_out.stdout_lines|join('\n') }}"
    dest: "{{ selftests_workdir}}/userspace.log"
  when:
    - selftest_userspace|bool

- name: Save module load test output
  tags: ["selftests", "run_tests"]
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.copy:
    content: "{{ selftests_module_out.stdout_lines|join('\n') }}"
    dest: "{{ selftests_workdir}}/module.log"
  when:
    - selftest_userspace|bool
    - not selftest_vma|bool

- name: Look for the test output logs files on {{ selftests_workdir }}
  tags: ["selftests", "copy_results"]
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.find:
    paths: "{{ selftests_workdir }}"
    recurse: true
    patterns:
      - "output.log"
      - "kselftest-list.txt"
      - "tap.log"
      - "userspace.log"
      - "module.log"
      - "dmesg.log"
  register: output_log_files

- name: Copy the output files from {{ selftests_workdir }}
  tags: ["selftests", "copy_results"]
  become: true
  become_flags: "su - -c"
  become_method: sudo
  vars:
    item_with_target: "{{ target_selftest }}.{{ item.path | basename }}"
  ansible.builtin.fetch:
    src: "{{ item.path }}"
    dest: "{{ selftests_results_target }}/{{ item_with_target }}"
    flat: true
  with_items: "{{ output_log_files.files }}"
  loop_control:
    label: "Copying {{ item_with_target }} ..."
  when:
    - output_log_files.matched > 0

- name: Find all *.tap.log files in the selftests_results_target directory
  tags: ["selftests", "check_results"]
  delegate_to: localhost
  ansible.builtin.find:
    paths: "{{ selftests_results_target }}"
    patterns: "*.tap.log"
  register: tap_log_files

- name: Read each tap.log file
  tags: ["selftests", "check_results"]
  delegate_to: localhost
  ansible.builtin.slurp:
    src: "{{ item.path }}"
  with_items: "{{ tap_log_files.files }}"
  register: tap_log_contents
  loop_control:
    label: "Reading {{ item.path }}"

- name: Initialize tap_failures as an empty list
  tags: ["selftests", "check_results"]
  delegate_to: localhost
  ansible.builtin.set_fact:
    tap_failures: []

- name: Read each tap.log file
  tags: ["selftests", "check_results"]
  delegate_to: localhost
  ansible.builtin.slurp:
    src: "{{ item.path }}"
  with_items: "{{ tap_log_files.files }}"
  register: tap_log_contents
  loop_control:
    label: "Reading {{ item.path }}"

- name: Check for TAP failures in the content of each tap.log
  tags: ["selftests", "check_results"]
  delegate_to: localhost
  ansible.builtin.set_fact:
    tap_failures: "{{ tap_failures + [{'file': item.item.path, 'content': item.content | b64decode | string}] }}"
  when: "'not ok' in (item.content | b64decode | string)"
  with_items: "{{ tap_log_contents.results }}"
  loop_control:
    label: "Checking for failures in {{ item.item.path }}"

- name: Fail if TAP failures are found
  tags: ["selftests", "check_results"]
  delegate_to: localhost
  ansible.builtin.fail:
    msg: |
      Test failures detected in the following TAP logs:
      {% for failure in tap_failures %}
      {{ failure.file }}:
      {{ failure.content | regex_findall('.*not ok.*') | join('\n') }}
      {% endfor %}
  when: tap_failures | length > 0
