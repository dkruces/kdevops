---
- name: Print uname for each host
  tags: ["run_tests"]
  ansible.builtin.debug: var=ansible_kernel
- name: Hint to our watchdog our reboot-limit tests are about to kick off
  ansible.builtin.file: path="{{ reboot_limit_local_results_dir }}/.begin" state=touch
  delegate_to: localhost
  tags: ["run_tests"]
  run_once: true

- name: Run the reboot test using the ansible reboot module
  become: true
  become_method: sudo
  ansible.builtin.reboot:
    post_reboot_delay: 10
  when:
    - reboot_limit_test_type == "ansible"
  tags: ["run_tests"]

- name: Reboot using systemctl reboot with proper handling
  become: true
  become_method: sudo
  ansible.builtin.reboot:
    msg: "Rebooting system via systemctl reboot for reboot-limit test"
    reboot_command: "systemctl reboot"
    post_reboot_delay: 10
    reboot_timeout: 300
  when:
    - reboot_limit_test_type == "systemctl_reboot"
  tags: ["run_tests"]

# kexec tasks - prepare the kernel for kexec before rebooting
- name: Get current kernel version for kexec
  ansible.builtin.command: uname -r
  register: current_kernel_version
  when:
    - reboot_limit_test_type == "systemctl_kexec"
  tags: ["run_tests"]

- name: Check for kernel image locations for kexec
  ansible.builtin.stat:
    path: "{{ kernel_path }}"
  register: kernel_stat
  loop:
    - "/boot/vmlinuz-{{ current_kernel_version.stdout }}"
    - "/boot/vmlinux-{{ current_kernel_version.stdout }}"
    - "/boot/kernel-{{ current_kernel_version.stdout }}"
  loop_control:
    loop_var: kernel_path
  when:
    - reboot_limit_test_type == "systemctl_kexec"
    - current_kernel_version is defined
  tags: ["run_tests"]

- name: Set kernel path for kexec
  ansible.builtin.set_fact:
    kexec_kernel_path: "{{ kernel_item.stat.path }}"
  loop: "{{ kernel_stat.results }}"
  loop_control:
    loop_var: kernel_item
  when:
    - reboot_limit_test_type == "systemctl_kexec"
    - kernel_item.stat.exists
  tags: ["run_tests"]

- name: Check for initrd/initramfs locations for kexec
  ansible.builtin.stat:
    path: "{{ initrd_path }}"
  register: initrd_stat
  loop:
    - "/boot/initrd.img-{{ current_kernel_version.stdout }}"
    - "/boot/initramfs-{{ current_kernel_version.stdout }}.img"
    - "/boot/initrd-{{ current_kernel_version.stdout }}"
    - "/boot/initrd-{{ current_kernel_version.stdout }}.img"
  loop_control:
    loop_var: initrd_path
  when:
    - reboot_limit_test_type == "systemctl_kexec"
    - current_kernel_version is defined
  tags: ["run_tests"]

- name: Set initrd path for kexec
  ansible.builtin.set_fact:
    kexec_initrd_path: "{{ initrd_item.stat.path }}"
  loop: "{{ initrd_stat.results }}"
  loop_control:
    loop_var: initrd_item
  when:
    - reboot_limit_test_type == "systemctl_kexec"
    - initrd_item.stat.exists
  tags: ["run_tests"]

- name: Read current kernel command line for kexec
  ansible.builtin.slurp:
    src: /proc/cmdline
  register: cmdline_content
  when:
    - reboot_limit_test_type == "systemctl_kexec"
  tags: ["run_tests"]

- name: Load kernel into kexec
  become: true
  become_method: sudo
  ansible.builtin.command: >
    kexec -l {{ kexec_kernel_path }}
    --initrd={{ kexec_initrd_path }}
    --command-line="{{ cmdline_content.content | b64decode | trim }}"
  when:
    - reboot_limit_test_type == "systemctl_kexec"
    - kexec_kernel_path is defined
    - kexec_initrd_path is defined
  tags: ["run_tests"]

- name: Reboot using systemctl kexec with proper handling
  become: true
  become_method: sudo
  ansible.builtin.reboot:
    msg: "Rebooting system via systemctl kexec for reboot-limit test"
    reboot_command: "systemctl kexec"
    post_reboot_delay: 10
    reboot_timeout: 300
  when:
    - reboot_limit_test_type == "systemctl_kexec"
  tags: ["run_tests"]

- name: Check if the reboot limit count variable file exists
  become: true
  become_method: sudo
  ansible.builtin.stat:
    path: "{{ reboot_limit_count_file }}"
  register: reboot_limit_reg_count_file
  tags: ["run_tests", "read_count", "vars"]

- name: Read last boot count variable file
  become: true
  become_method: sudo
  ansible.builtin.slurp:
    src: "{{ reboot_limit_count_file }}"
  register: reboot_limit_last_count
  when:
    - reboot_limit_reg_count_file.stat.exists
  tags: ["run_tests", "read_count", "vars"]

- name: Set the current boot count into a variable
  ansible.builtin.set_fact:
    reboot_limit_count: "{{ reboot_limit_last_count['content'] | b64decode | int }}"
  tags: ["run_tests", "read_count", "vars"]
  when:
    - reboot_limit_reg_count_file.stat.exists

- name: Adjust the local boot count variable if we rebooted OK
  ansible.builtin.set_fact:
    reboot_limit_count: "{{ reboot_limit_count | int + 1 }}"
  tags: ["run_tests", "read_count"]
  when:
    - reboot_limit_reg_count_file.stat.exists

- name: Set the current boot count into a variable when no prior boot test exists
  ansible.builtin.set_fact:
    reboot_limit_count: 1
  tags: ["run_tests", "read_count", "vars"]
  when:
    - not reboot_limit_reg_count_file.stat.exists

- name: Enable sysrq key if we're about to force a crash
  become: true
  become_method: sudo
  ansible.builtin.shell: echo 1 > /proc/sys/kernel/sysrq
  tags: ["run_tests", "read_count", "vars", "crash-check"]
  when:
    - reboot_limit_boot_count_crash_enable
    - ((reboot_limit_count | int % reboot_limit_boot_crash_count | int) == 0)

- name: Force a crash if we were asked to
  become: true
  become_method: sudo
  ansible.builtin.shell: echo c > /proc/sysrq-trigger
  ignore_errors: true
  tags: ["run_tests", "read_count", "vars", "crash-check"]
  when:
    - reboot_limit_boot_count_crash_enable
    - ((reboot_limit_count | int % reboot_limit_boot_crash_count | int) == 0)

- name: Write current updated boot count variable file to be {{ reboot_limit_count }}
  become: true
  become_method: sudo
  ansible.builtin.copy:
    content: "{{ reboot_limit_count }}"
    dest: "{{ reboot_limit_count_file }}"
  when:
    - reboot_limit_reg_count_file.stat.exists
  tags: ["run_tests", "read_count"]

- name: Create last boot count variable file if it does not exist
  become: true
  become_method: sudo
  ansible.builtin.copy:
    content: "1"
    dest: "{{ reboot_limit_count_file }}"
  when:
    - not reboot_limit_reg_count_file.stat.exists
  tags: ["run_tests", "read_count"]

- name: Wait for boot up to complete before running systemd-analyze
  become: true
  become_method: sudo
  ansible.builtin.command: "systemctl is-system-running --wait"
  when:
    - reboot_limit_enable_systemd_analyze|bool
  tags: ["run_tests"]

- name: Collect systemctl-analyze results
  become: true
  become_method: sudo
  ansible.builtin.command: "systemd-analyze"
  register: systemd_analyze_cmd
  when:
    - reboot_limit_enable_systemd_analyze|bool
  tags: ["run_tests"]

- name: Append systemctl-analyze output
  become: true
  become_method: sudo
  tags: ["run_tests"]
  ansible.builtin.lineinfile:
    path: "{{ reboot_limit_analyze_file }}"
    line: "{{ systemd_analyze_cmd.stdout }}"
    create: true
  when:
    - reboot_limit_enable_systemd_analyze|bool
