---
# Tasks to stop monitoring services and collect data after test execution

- name: Check if folio migration monitoring was started
  become: true
  become_method: sudo
  ansible.builtin.stat:
    path: /root/monitoring/folio_migration.pid
  register: folio_migration_pid_file
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool

- name: Stop folio migration monitoring
  become: true
  become_method: sudo
  ansible.builtin.shell: |
    if [ -f /root/monitoring/folio_migration.pid ]; then
      pid=$(cat /root/monitoring/folio_migration.pid)
      if ps -p $pid > /dev/null 2>&1; then
        kill $pid
        echo "Stopped monitoring process $pid"
      else
        echo "Monitoring process $pid was not running"
      fi
      rm -f /root/monitoring/folio_migration.pid
    fi
  register: stop_monitor
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - folio_migration_pid_file.stat.exists|default(false)

- name: Display stop monitoring status
  ansible.builtin.debug:
    msg: "{{ stop_monitor.stdout }}"
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - stop_monitor is defined
    - stop_monitor.changed|default(false)

- name: Check if monitoring data was collected
  become: true
  become_method: sudo
  ansible.builtin.stat:
    path: /root/monitoring/folio_migration_stats.txt
  register: folio_migration_data_file
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool

- name: Copy plot_migration_stats.py to target
  become: true
  become_method: sudo
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/roles/monitoring/files/plot_migration_stats.py"
    dest: /root/monitoring/plot_migration_stats.py
    mode: "0755"
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - folio_migration_data_file.stat.exists|default(false)

- name: Check if matplotlib is available for plotting
  become: true
  become_method: sudo
  ansible.builtin.command: python3 -c "import matplotlib.pyplot"
  register: matplotlib_check
  ignore_errors: true
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - folio_migration_data_file.stat.exists|default(false)

- name: Generate folio migration plots
  become: true
  become_method: sudo
  ansible.builtin.command: |
    python3 /root/monitoring/plot_migration_stats.py
      /root/monitoring/folio_migration_stats.txt
      /root/monitoring/folio_migration_plot.png
  args:
    chdir: /root/monitoring
  register: plot_generation
  ignore_errors: true
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - folio_migration_data_file.stat.exists|default(false)
    - matplotlib_check.rc == 0

- name: Log plot generation skip if matplotlib not available
  ansible.builtin.debug:
    msg: "Skipping plot generation - matplotlib not available on target system"
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - folio_migration_data_file.stat.exists|default(false)
    - matplotlib_check.rc != 0

- name: Debug monitoring collection start
  ansible.builtin.debug:
    msg: |
      Starting monitoring collection
      monitor_developmental_stats: {{ monitor_developmental_stats | default(false) }}
      monitor_folio_migration: {{ monitor_folio_migration | default(false) }}
      enable_monitoring: {{ enable_monitoring | default(false) }}
      kdevops_run_fstests: {{ kdevops_run_fstests | default(false) }}

- name: Set monitoring results path
  ansible.builtin.set_fact:
    monitoring_results_path: "{{ monitoring_results_base_path | default(topdir_path + '/workflows/fstests/results/monitoring') }}"

# Set blktests-specific monitoring results path
- name: Set blktests monitoring results path
  ansible.builtin.set_fact:
    monitoring_results_path: "{{ topdir_path }}/workflows/blktests/results/monitoring"
  when:
    - kdevops_run_blktests|default(false)|bool
    - enable_monitoring|default(false)|bool

- name: Create local monitoring results directory
  ansible.builtin.file:
    path: "{{ monitoring_results_path }}"
    state: directory
  delegate_to: localhost
  run_once: true
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool

- name: Copy folio migration stats data to localhost
  become: true
  become_method: sudo
  ansible.builtin.fetch:
    src: /root/monitoring/folio_migration_stats.txt
    dest: "{{ monitoring_results_path }}/{{ ansible_hostname }}_folio_migration_stats.txt"
    flat: true
    validate_checksum: false
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - folio_migration_data_file.stat.exists|default(false)

- name: Check if plot was generated
  become: true
  become_method: sudo
  ansible.builtin.stat:
    path: /root/monitoring/folio_migration_plot.png
  register: folio_migration_plot_file
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool

- name: Copy folio migration plot to localhost
  become: true
  become_method: sudo
  ansible.builtin.fetch:
    src: /root/monitoring/folio_migration_plot.png
    dest: "{{ monitoring_results_path }}/{{ ansible_hostname }}_folio_migration_plot.png"
    flat: true
    validate_checksum: false
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - folio_migration_plot_file.stat.exists|default(false)

- name: Display monitoring data collection summary
  ansible.builtin.debug:
    msg: |
      Folio migration monitoring collection complete.
      Data saved to: {{ monitoring_results_path }}/{{ ansible_hostname }}_folio_migration_stats.txt
      {% if folio_migration_plot_file.stat.exists | default(false) %}
      Plot saved to: {{ monitoring_results_path }}/{{ ansible_hostname }}_folio_migration_plot.png
      {% endif %}
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - folio_migration_data_file.stat.exists|default(false)

# Generate plots on localhost after collecting data
- name: Check if matplotlib is available on localhost
  ansible.builtin.command: python3 -c "import matplotlib.pyplot"
  delegate_to: localhost
  register: localhost_matplotlib_check
  ignore_errors: true
  run_once: true
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool

- name: Generate folio migration plots on localhost
  ansible.builtin.command: "python3 {{ playbook_dir }}/roles/monitoring/files/plot_migration_stats.py\n  -o {{ monitoring_results_path }}/{{ ansible_hostname }}_folio_migration_plot.png\n\
    \  {{ monitoring_results_path }}/{{ ansible_hostname }}_folio_migration_stats.txt\n"
  delegate_to: localhost
  register: localhost_plot_generation
  ignore_errors: true
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - folio_migration_data_file.stat.exists|default(false)
    - localhost_matplotlib_check.rc == 0

- name: Log localhost plot generation status
  ansible.builtin.debug:
    msg: |
      {% if localhost_matplotlib_check.rc != 0 %}
      Skipping plot generation - matplotlib not available on localhost
      {% else %}
      Plot generated: {{ monitoring_results_path }}/{{ ansible_hostname }}_folio_migration_plot.png
      {% endif %}
  when:
    - monitor_developmental_stats|default(false)|bool
    - monitor_folio_migration|default(false)|bool
    - folio_migration_data_file.stat.exists|default(false)

# NVMe OCP monitoring collection
- name: Check if NVMe OCP monitoring is enabled
  ansible.builtin.set_fact:
    nvme_ocp_enabled: "{{ monitor_nvme_ocp|default(false)|bool }}"

- name: Check for NVMe OCP monitoring processes
  become: true
  become_method: sudo
  ansible.builtin.shell: "ls /root/monitoring/nvme_ocp_*.pid 2>/dev/null || true"
  register: nvme_ocp_pids
  changed_when: false
  when:
    - enable_monitoring|default(false)|bool

- name: Stop NVMe OCP monitoring processes
  become: true
  become_method: sudo
  ansible.builtin.shell: |
    for pidfile in /root/monitoring/nvme_ocp_*.pid; do
      if [ -f "$pidfile" ]; then
        device_name=$(basename "$pidfile" .pid | sed 's/nvme_ocp_//')
        pid=$(cat "$pidfile")
        if ps -p $pid > /dev/null 2>&1; then
          kill $pid
          echo "Stopped NVMe OCP monitoring for device $device_name (PID $pid)"
        else
          echo "NVMe OCP monitoring for device $device_name (PID $pid) was not running"
        fi
        rm -f "$pidfile"
      fi
    done
  register: nvme_stop_monitor
  when:
    - enable_monitoring|default(false)|bool
    - nvme_ocp_pids.stdout != ""

- name: Display NVMe OCP stop status
  ansible.builtin.debug:
    msg: "{{ nvme_stop_monitor.stdout }}"
  when:
    - enable_monitoring|default(false)|bool
    - nvme_stop_monitor is defined
    - nvme_stop_monitor.stdout != ""

- name: Create local NVMe OCP monitoring results directory
  ansible.builtin.file:
    path: "{{ monitoring_results_path }}"
    state: directory
  delegate_to: localhost
  run_once: true
  when:
    - enable_monitoring|default(false)|bool
    - nvme_ocp_enabled|bool

- name: Collect NVMe OCP monitoring data files
  become: true
  become_method: sudo
  ansible.builtin.shell: "ls /root/monitoring/nvme_ocp_*_stats.txt 2>/dev/null || true"
  register: nvme_ocp_data_files
  changed_when: false
  when:
    - enable_monitoring|default(false)|bool
    - nvme_ocp_enabled|bool

- name: Copy NVMe OCP monitoring data to localhost
  become: true
  become_method: sudo
  ansible.builtin.fetch:
    src: "{{ item }}"
    dest: "{{ monitoring_results_path }}/{{ ansible_hostname }}_{{ item | basename }}"
    flat: true
    validate_checksum: false
  loop: "{{ nvme_ocp_data_files.stdout_lines|default([]) }}"
  when:
    - enable_monitoring|default(false)|bool
    - nvme_ocp_enabled|bool
    - nvme_ocp_data_files.stdout != ""

- name: Display NVMe OCP data collection summary
  ansible.builtin.debug:
    msg: |
      NVMe OCP monitoring collection complete.
      Data files copied: {{ nvme_ocp_data_files.stdout_lines|default([])|length }}
      Results directory: {{ monitoring_results_path }}
  when:
    - enable_monitoring|default(false)|bool
    - nvme_ocp_enabled|bool
    - nvme_ocp_data_files.stdout != ""

# Generate NVMe OCP plots on localhost
- name: Check if matplotlib is available on localhost for NVMe OCP plots
  ansible.builtin.command: python3 -c "import matplotlib.pyplot"
  delegate_to: localhost
  register: nvme_localhost_matplotlib_check
  ignore_errors: true
  run_once: true
  when:
    - enable_monitoring|default(false)|bool
    - nvme_ocp_enabled|bool

- name: Find collected NVMe OCP data files for plotting
  ansible.builtin.find:
    paths: "{{ monitoring_results_path }}"
    patterns: "*_nvme_ocp_*_stats.txt"
  delegate_to: localhost
  register: nvme_plot_files
  run_once: true
  when:
    - enable_monitoring|default(false)|bool
    - nvme_ocp_enabled|bool
    - nvme_localhost_matplotlib_check.rc == 0

- name: Generate NVMe SMART plots on localhost
  ansible.builtin.command: |
    python3 {{ playbook_dir }}/roles/monitoring/files/plot_nvme_smart_stats.py
      -o {{ monitoring_results_path }}/nvme_smart_combined_plot.png
      {{ nvme_plot_files.files | map(attribute='path') | join(' ') }}
  delegate_to: localhost
  register: nvme_plot_generation
  ignore_errors: true
  run_once: true
  when:
    - enable_monitoring|default(false)|bool
    - nvme_ocp_enabled|bool
    - nvme_localhost_matplotlib_check.rc == 0
    - nvme_plot_files.matched > 0

- name: Log NVMe OCP plot generation status
  ansible.builtin.debug:
    msg: |
      {% if nvme_localhost_matplotlib_check.rc != 0 %}
      Skipping NVMe OCP plot generation - matplotlib not available on localhost
      {% elif nvme_plot_files.matched == 0 %}
      Skipping NVMe OCP plot generation - no data files found
      {% else %}
      NVMe OCP plot generated: {{ monitoring_results_path }}/nvme_ocp_combined_plot.png
      Data files processed: {{ nvme_plot_files.matched }}
      {% endif %}
  delegate_to: localhost
  run_once: true
  when:
    - enable_monitoring|default(false)|bool
    - nvme_ocp_enabled|bool
