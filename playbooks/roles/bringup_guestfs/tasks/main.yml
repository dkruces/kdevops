- name: Install dependencies
  ansible.builtin.include_tasks: install-deps/main.yml
  tags: ['install-deps']

- name: Verify we're configured {{ topdir_path }}/.config directory exists
  stat:
    path: "{{ topdir_path }}/.config"
  register: config_file
  tags: [ 'config-check' ]

- name: Fail if {{ topdir_path }}/.config is not present
  fail:
    msg: "kdevops is not confgured. You must run 'make menuconfig'"
  when: not config_file.stat.exists or not config_file.stat.isreg
  tags: [ 'config-check' ]

- name: Check if guestfs directory exists
  stat:
    path: "{{ topdir_path }}/guestfs"
  register: guestfs_dir_stat
  tags: [ 'config-check' ]

- name: Fail if guestfs directory does not exist
  fail:
    msg: "The guestfs directory does not exist. You must run make first."
  when: not guestfs_dir_stat.stat.exists
  tags: [ 'config-check' ]

- name: Check for directories in {{ topdir_path }}/guestfs
  find:
    paths: "{{ topdir_path }}/guestfs"
    file_type: directory
    recurse: no
    depth: 1
  register: guestfs_subdirectories
  when: guestfs_dir_stat.stat.exists
  tags: [ 'config-check' ]

- name: Fail if no directories found in {{ topdir_path }}/guestfs
  fail:
    msg: "No directories found in guestfs. You must run make first."
  when: guestfs_subdirectories.matched == 0
  tags: [ 'config-check' ]

- name: Check for dnsmasq configuration files
  stat:
    path: "{{ item }}"
  loop:
    - /etc/dnsmasq.conf
    - /etc/dnsmasq.d
  register: dnsmasq_config_files
  when:
    - distro_debian_based|bool
  tags: [ 'network' ]

- name: Fail if dnsmasq configuration files exist
  fail:
    msg: |
      dnsmasq configuration files or directories still exist.
      Please remove the following to fully uninstall
      dnsmasq:\n{{ dnsmasq_config_files | join('\n') }}
  when:
    - distro_debian_based|bool
    - dnsmasq_config_files.results | selectattr('stat.exists') | list | length > 0
  tags: [ 'network' ]

- name: Check dnsmasq service status
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  command: systemctl is-enabled dnsmasq
  register: dnsmasq_enabled
  failed_when: false
  changed_when: false
  when:
    - distro_debian_based|bool
    - dnsmasq_config_files | length > 0
  tags: [ 'network' ]

- name: Check if dnsmasq service is active
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  command: systemctl is-active dnsmasq
  register: dnsmasq_active
  failed_when: false
  changed_when: false
  when:
    - distro_debian_based|bool
    - dnsmasq_config_files | length > 0
  tags: [ 'network' ]

- name: Fail if dnsmasq service is enabled or active
  fail:
    msg: |
      dnsmasq service is
      {{ 'enabled' if dnsmasq_enabled.rc == 0 else 'active' if dnsmasq_active.rc == 0 else 'present' }}.
      Please ensure dnsmasq is fully uninstalled and disabled.
      Run 'sudo systemctl disable dnsmasq' and 'sudo systemctl
      stop dnsmasq' to disable and stop the service.
  when:
    - distro_debian_based|bool
    - dnsmasq_config_files | length > 0
    - (dnsmasq_enabled.rc == 0) or (dnsmasq_active.rc == 0)
  tags: [ 'network' ]

- name: Check if libvirt default network is running
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  shell: virsh net-list | grep -q default
  register: libvirt_default_net
  ignore_errors: yes
  when:
    - 'libvirt_uri_system|bool'
  tags: [ 'network' ]

- name: Start the libvirt default network if not running
  command: virsh net-start default
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  when:
    - 'libvirt_uri_system|bool'
    - libvirt_default_net.rc != 0
  tags: [ 'network' ]

- name: Get the actual user who invoked Ansible
  command: whoami
  register: reg_user
  changed_when: false
  when:
    - 'libvirt_uri_system|bool'
  tags: ['console-permissions']

- name: Look for console.log files in guestfs subdirectories to check for CI enablement
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  find:
    paths: "{{ topdir_path }}/guestfs"
    patterns: "console.log"
    file_type: file
    recurse: yes
  register: console_log_files
  when:
    - 'libvirt_uri_system|bool'
  tags: ['console-permissions']

- name: Ensure console.log files are owned by the main user for CI monitoring
  become: yes
  become_flags: 'su - -c'
  become_method: sudo
  file:
    path: "{{ item.path }}"
    owner: "{{ reg_user.stdout }}"
    group: "{{ reg_user.stdout }}"
  loop: "{{ console_log_files.files }}"
  loop_control:
    label: "{{ item.path | regex_replace('^.*guestfs/', 'guestfs/') }}"
  when:
    - 'libvirt_uri_system|bool'
    - console_log_files.matched > 0
  tags: ['console-permissions']
