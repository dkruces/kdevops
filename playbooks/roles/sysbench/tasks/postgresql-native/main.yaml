---
- name: Get the latest PostgreSQL ref
  tags: ["setup"]
  ansible.builtin.shell: |
    set -o pipefail && \
    git ls-remote --tags --sort="-version:refname" \
    https://git.postgresql.org/git/postgresql.git {{ sysbench_postgresql_ref_string }}* \
    | grep -E 'refs/tags/REL_[0-9]+_[0-9]+$' \
    | head -n 1 \
    | awk '{print $2}' \
    | sed 's#refs/tags/##'
  args:
    executable: /bin/bash
  register: _sysbench_postgresql_ref
  changed_when: false

- name: Git clone PostgreSQL
  tags: ["setup"]
  ansible.builtin.git:
    repo: "https://git.postgresql.org/git/postgresql.git"
    dest: "{{ sysbench_postgresql_repo_path }}"
    update: true
    version: "{{ _sysbench_postgresql_ref.stdout }}"
  environment:
    GIT_SSL_NO_VERIFY: "true"

- name: Get number of processing units available
  tags: ["always"]
  ansible.builtin.command: nproc --all
  register: _sysbench_punits
  changed_when: _sysbench_punits.rc != 0

- name: Set threads using nproc output
  tags: ["always"]
  ansible.builtin.set_fact:
    _sysbench_threads: "{{ _sysbench_punits.stdout }}"
  when:
    - sysbench_threads == 0

- name: Set threads manually
  tags: ["always"]
  ansible.builtin.set_fact:
    _sysbench_threads: "{{ sysbench_threads }}"
  when:
    - sysbench_threads != 0

- name: Check if clean is required for PostgreSQL builddir
  tags: ["setup"]
  ansible.builtin.stat:
    path: "{{ sysbench_postgresql_repo_path }}/GNUmakefile"
  register: _sysbench_postgresql_cleanup

- name: Clean PostgreSQL builddir
  tags: ["setup"]
  ansible.builtin.command:
    cmd: |
      make clean
      make distclean
  args:
    chdir: "{{ sysbench_postgresql_repo_path }}"
  register: _sysbench_postgresql_clean
  changed_when: _sysbench_postgresql_clean.rc != 0
  when:
    - _sysbench_postgresql_cleanup.stat.exists|bool
  ignore_errors: true

- name: Configure PostgreSQL
  tags: ["setup"]
  ansible.builtin.command:
    cmd: >
      ./configure
      --with-blocksize={{ sysbench_postgresql_blocksize }}
      --with-wal-blocksize={{ sysbench_postgresql_wal_blocksize }}
  args:
    chdir: "{{ sysbench_postgresql_repo_path }}"
  register: _sysbench_postgresql_configure
  changed_when: _sysbench_postgresql_configure.rc != 0

- name: Build PostgreSQL
  tags: ["setup"]
  community.general.make:
    jobs: "{{ _sysbench_punits.stdout }}"
  args:
    chdir: "{{ sysbench_postgresql_repo_path }}"
  changed_when: false

- name: Install PostgreSQL
  tags: ["setup"]
  become: true
  become_method: sudo
  community.general.make:
    target: install
  args:
    chdir: "{{ sysbench_postgresql_repo_path }}"

- name: Create PostgreSQL benchmark user
  tags: ["setup"]
  become: true
  become_method: sudo
  ansible.builtin.user:
    name: "{{ sysbench_postgresql_user }}"

- name: Ensure telemetry data directory exists
  tags: ["setup", "db_start"]
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.file:
    path: "{{ sysbench_telemetry_path }}"
    state: directory
    mode: "u=rwx,g=rx,o=rx"

- name: Check if PostgreSQL Server is Running
  tags: ["always"]
  become: true
  become_user: "{{ sysbench_postgresql_user }}"
  ansible.builtin.stat:
    path: "{{ sysbench_postgresql_pgdata }}/postmaster.pid"
  register: _sysbench_postgresql_stop

- name: Stop the PostgreSQL Server
  tags: ["always"]
  become: true
  become_user: "{{ sysbench_postgresql_user }}"
  ansible.builtin.command: >
    /usr/local/pgsql/bin/pg_ctl
    --pgdata={{ sysbench_postgresql_pgdata }}
    --log={{ sysbench_postgresql_logfile }}
    stop
    --mode=immediate
  retries: 5
  delay: 10
  changed_when: false
  when:
    - _sysbench_postgresql_stop.stat.exists | bool

- name: Determine filesystem setting used and db page size
  tags: ["vars"]
  vars:
    fs_type_variable: "{{ ansible_host | regex_replace('^' + kdevops_host_prefix + '-', '') | regex_replace('-.+', '') }}"
    fs_command_variable_simple: "sysbench_{{ ansible_host | regex_replace('^' + kdevops_host_prefix + '-', '') | regex_replace('-dev$', '') }}_cmd"
    fs_command_variable: "{{ fs_command_variable_simple | regex_replace('-', '_') | regex_replace('^sysbench_' + fs_type_variable, fs_type_variable + '_section')
      }}"
    db_page_size_simple: "sysbench_{{ ansible_host | regex_replace('^' + kdevops_host_prefix + '-', '') | regex_replace('-dev$', '') }}_db_page_size"
    db_page_size_variable: "{{ db_page_size_simple | regex_replace('-', '_') | regex_replace('^sysbench_' + fs_type_variable, fs_type_variable + '_section') }}"
    fs_sector_size_variable: "sysbench_{{ fs_type_variable }}_sector_size"
    fs_cmd: "{{ lookup('vars', 'sysbench_' + fs_command_variable) }}"
    sect_size: "{{ lookup('vars', fs_sector_size_variable) }}"
    db_page_size: "{{ sysbench_postgresql_blocksize }}"
  ansible.builtin.set_fact:
    filesystem_command_for_host: "{{ fs_cmd }}"
    sysbench_fs_sector_size: "{{ sect_size }}"
    sysbench_fstype: "{{ fs_type_variable }}"
    sysbench_fs_opts_without_sector_size: "{{ fs_cmd | regex_replace('^[^ ]+ ', '') }}"
    sysbench_db_page_size: "{{ db_page_size }}"

- name: Set filesystem options for XFS with sector size
  tags: ["mkfs"]
  ansible.builtin.set_fact:
    sysbench_fs_opts: "{{ sysbench_fs_opts_without_sector_size }} -s size={{ sysbench_fs_sector_size }} -L {{ sysbench_label }}"
  when: sysbench_fstype != 'ext4'

- name: Set filesystem options for ext4 without sector size
  tags: ["mkfs"]
  ansible.builtin.set_fact:
    sysbench_fs_opts: "{{ sysbench_fs_opts_without_sector_size }} -L {{ sysbench_label }}"
  when: sysbench_fstype == 'ext4'

- name: Set environment variable for sector size for ext4
  tags: ["mkfs"]
  ansible.builtin.set_fact:
    sysbench_fs_env:
      MKE2FS_DEVICE_SECTSIZE: "{{ sysbench_fs_sector_size }}"
  when: sysbench_fstype == 'ext4'

- name: Clear environment variable for non-ext4 filesystems
  tags: ["mkfs"]
  ansible.builtin.set_fact:
    sysbench_fs_env: {}
  when: sysbench_fstype != 'ext4'

- name: Display the filesystem options and environment variable for the current host
  tags: ["debug"]
  ansible.builtin.debug:
    msg: |
      Sysbench device:    {{ sysbench_device }}
      Sysbench fstype:    {{ sysbench_fstype }}
      Sysbench fs opts:   {{ sysbench_fs_opts }}
      Sysbench label:     {{ sysbench_label }}
      Sysbench mount:     {{ sysbench_mnt }}
      Sysbench env:       {{ sysbench_fs_env }}

- name: Fail if no filesystem command is found for the host
  tags: ["mkfs"]
  ansible.builtin.fail:
    msg: "No filesystem configuration command found for the current host: {{ ansible_host }}"
  when: filesystem_command_for_host is undefined

- name: Unmount {{ sysbench_mnt }}
  tags: ["clean", "mkfs"]
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.posix.mount:
    path: "{{ sysbench_mnt }}"
    state: unmounted

- name: Wipe filesystem signatures from the device
  tags: ["clean", "mkfs"]
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.command:
    cmd: "wipefs --all {{ sysbench_device }}"
  register: _sysbench_postgresql_wipefs
  changed_when: _sysbench_postgresql_wipefs.rc != 0

- name: Create the filesystem we'll use to place the database under test
  tags: ["clean", "mkfs"]
  ansible.builtin.include_role:
    name: create_partition
  vars:
    disk_setup_device: "{{ sysbench_device }}"
    disk_setup_fstype: "{{ sysbench_fstype }}"
    disk_setup_label: "{{ sysbench_label }}"
    disk_setup_path: "{{ sysbench_mnt }}"
    disk_setup_fs_opts: "{{ sysbench_fs_opts }}"
    disk_setup_env: "{{ sysbench_fs_env }}"

- name: Change ownership of PostgreSQL database under test mount directory
  become: true
  become_method: sudo
  ansible.builtin.file:
    path: "{{ sysbench_mnt }}"
    owner: "{{ sysbench_postgresql_user }}"
    group: "{{ sysbench_postgresql_user }}"
    recurse: true

- name: Initialize the PostgreSQL database
  tags: ["setup"]
  become: true
  become_method: sudo
  become_user: "{{ sysbench_postgresql_user }}"
  ansible.builtin.command: >
    /usr/local/pgsql/bin/initdb
    --pgdata={{ sysbench_postgresql_pgdata }}
  register: _sysbench_postgresql_initdb
  changed_when: _sysbench_postgresql_initdb.rc != 0

- name: Set sysbench_postgresql_full_page_writes based on ansible_host
  tags: ["vars"]
  ansible.builtin.set_fact:
    sysbench_host_is_baseline: "{{ False if ansible_host is search('-dev$') else True }}"
    sysbench_postgresql_full_page_writes: "{{ 'off' if ansible_host is search('-dev$') else 'on' }}"
  when:
    - sysbench_disable_full_page_writes_auto|bool

- name: Set sysbench_postgresql_full_page_writes based on ansible_host
  tags: ["vars"]
  ansible.builtin.set_fact:
    sysbench_postgresql_full_page_writes: "off"
  when:
    - sysbench_disable_full_page_writes_always|bool

- name: Generate PostgreSQL configuration file from template
  tags: ["setup"]
  become: true
  become_method: sudo
  become_user: "{{ sysbench_postgresql_user }}"
  ansible.builtin.template:
    src: "{{ sysbench_postgresql_configuration }}.j2"
    dest: "{{ sysbench_postgresql_pgdata }}/postgresql.conf"
    mode: "u=rw,g=r,o=r"

- name: Get used target kernel version
  tags: ["db_start"]
  ansible.builtin.command: "uname -r"
  changed_when: false
  register: _uname_cmd

- name: Store last kernel variable
  tags: ["db_start"]
  ansible.builtin.set_fact:
    last_kernel: "{{ _uname_cmd.stdout_lines | regex_replace('\\]') | regex_replace('\\[') | replace(\"'\", '') }}"
  run_once: true

- name: Ensure the results directory exists on the localhost
  tags: ["db_start", "results"]
  delegate_to: localhost
  ansible.builtin.file:
    path: "{{ topdir_path }}/workflows/sysbench/results/"
    state: directory
    mode: "0755"
  run_once: true

- name: Ensure the results directory exists on the localhost for each node locally
  tags: ["db_start", "results"]
  delegate_to: localhost
  ansible.builtin.file:
    path: "{{ topdir_path }}/workflows/sysbench/results/{{ inventory_hostname }}/"
    state: directory
    mode: "0755"

- name: Ensure the results directory exists on the localhost for each node locally
  tags: ["db_start", "plot"]
  delegate_to: localhost
  ansible.builtin.file:
    path: "{{ topdir_path }}/workflows/sysbench/results/{{ inventory_hostname }}-ab/"
    state: directory
    mode: "0755"
  when: "'-dev' not in inventory_hostname"

- name: Document used target kernel version
  tags: ["db_start"]
  delegate_to: localhost
  ansible.builtin.shell: |
    echo {{ last_kernel }} > {{ topdir_path }}/workflows/sysbench/results/{{ inventory_hostname }}-ab/last-kernel.txt
  changed_when: false
  run_once: true
  when: "'-dev' not in inventory_hostname"

- name: Document full_page_writes setting on node
  tags: ["db_start"]
  delegate_to: localhost
  ansible.builtin.shell: |
    echo {{ sysbench_postgresql_full_page_writes }} > {{ topdir_path }}/workflows/sysbench/results/{{ inventory_hostname }}/full_page_writes.txt
  changed_when: false

- name: Document db blocksize setting on node
  tags: ["db_start"]
  delegate_to: localhost
  ansible.builtin.shell: |
    echo {{ sysbench_db_page_size }} > {{ topdir_path }}/workflows/sysbench/results/{{ inventory_hostname }}/postgresql_blocksize.txt
  changed_when: false

- name: Start the PostgreSQL server
  tags: ["db_start"]
  become: true
  become_user: "{{ sysbench_postgresql_user }}"
  ansible.builtin.command: >
    /usr/local/pgsql/bin/pg_ctl
    --pgdata={{ sysbench_postgresql_pgdata }}
    --log={{ sysbench_postgresql_logfile }}
    start
  changed_when: false

- name: Create PostgreSQL database USER
  tags: ["db_start"]
  become: true
  become_user: "{{ sysbench_postgresql_user }}"
  ansible.builtin.command: >
    /usr/local/pgsql/bin/psql
    --command="CREATE USER {{ sysbench_db_username }} WITH PASSWORD '{{ sysbench_db_password }}';"
  register: _sysbench_postgresql_create_user_result
  failed_when:
    - _sysbench_postgresql_create_user_result.rc != 0
    - "'already exists' not in _sysbench_postgresql_create_user_result.stderr"
  changed_when: "'CREATE ROLE' in _sysbench_postgresql_create_user_result.stderr"

- name: Create PostgreSQL database DATABASE
  tags: ["db_start"]
  become: true
  become_user: "{{ sysbench_postgresql_user }}"
  ansible.builtin.command: >
    /usr/local/pgsql/bin/psql
    --command="CREATE DATABASE {{ sysbench_db_name }};"
  register: _sysbench_postgresql_create_db_result
  failed_when:
    - _sysbench_postgresql_create_db_result.rc != 0
    - "'already exists' not in _sysbench_postgresql_create_db_result.stderr"
  changed_when: "'CREATE DATABASE' in _sysbench_postgresql_create_db_result.stderr"

- name: Grant USER privileges to DATABASE
  tags: ["db_start"]
  become: true
  become_user: "{{ sysbench_postgresql_user }}"
  ansible.builtin.command: >
    /usr/local/pgsql/bin/psql
    --command="GRANT ALL PRIVILEGES ON DATABASE {{ sysbench_db_name }} TO {{ sysbench_db_username }};"
  changed_when: false

- name: Grant ALL public Privileges to DATABASE
  tags: ["db_start"]
  become: true
  become_user: "{{ sysbench_postgresql_user }}"
  ansible.builtin.command: >
    /usr/local/pgsql/bin/psql
    --host=localhost
    --port={{ sysbench_local_db_port }}
    --dbname={{ sysbench_db_name }}
    --username={{ sysbench_postgresql_user }}
    --no-password
    --command="GRANT ALL ON SCHEMA public TO {{ sysbench_db_name }};"
  changed_when: false

- name: Test and Ensure Permissions are Set Correctly
  tags: ["db_start"]
  become: true
  become_user: "{{ sysbench_postgresql_user }}"
  ansible.builtin.command: >
    /usr/local/pgsql/bin/psql
    --host=localhost
    --port={{ sysbench_local_db_port }}
    --dbname={{ sysbench_db_name }}
    --username={{ sysbench_postgresql_user }}
    --no-password
    --command="create table xyz(a varchar(100));"
  register: _sysbench_postgresql_test_db_result
  failed_when:
    - _sysbench_postgresql_test_db_result.rc != 0
    - "'already exists' not in _sysbench_postgresql_test_db_result.stderr"
  changed_when: "'CREATE TABLE' in _sysbench_postgresql_test_db_result.stderr"

# Keep this at threads=1 as multiple threads don't work when building the
# initial database.
- name: Populate sysbench database
  tags: ["db_start"]
  become: true
  become_user: "{{ sysbench_postgresql_user }}"
  ansible.builtin.command: >
    sysbench
    --db-driver={{ sysbench_db_type }}
    --table-size={{ sysbench_oltp_table_size }}
    --tables={{ sysbench_oltp_table_count }}
    --threads=1
    --pgsql-host=127.0.0.1
    --pgsql-port={{ sysbench_local_db_port }}
    --pgsql-user={{ sysbench_db_username }}
    --pgsql-password={{ sysbench_db_password }}
    --pgsql-db={{ sysbench_db_name }}
    --db-debug
    --verbosity=5
    /usr/share/sysbench/oltp_read_write.lua prepare
  register: _sysbench_init_pop
  failed_when:
    - _sysbench_init_pop.rc != 0
    - "'already exists' not in _sysbench_init_pop.stdout"
  changed_when: "'CREATE TABLE' in _sysbench_init_pop.stdout"

- name: Save the output of populating the initial sysbench database
  tags: ["db_start"]
  become: true
  become_method: sudo
  ansible.builtin.copy:
    content: "{{ _sysbench_init_pop.stdout }}"
    dest: "{{ sysbench_telemetry_path }}/sysbench_populate.txt"
    mode: "0755"

- name: Start sysbench run
  tags: ["run_sysbench"]
  become: true
  become_user: "{{ sysbench_postgresql_user }}"
  ansible.builtin.command: >
    sysbench
    --db-driver={{ sysbench_db_type }}
    --table-size={{ sysbench_oltp_table_size }}
    --tables={{ sysbench_oltp_table_count }}
    --threads={{ _sysbench_threads }}
    --pgsql-host=127.0.0.1
    --pgsql-port={{ sysbench_local_db_port }}
    --pgsql-user={{ sysbench_db_username }}
    --pgsql-password={{ sysbench_db_password }}
    --pgsql-db={{ sysbench_db_name }}
    --debug=on
    --db-debug
    --verbosity=5
    --time={{ sysbench_test_duration }}
    --report-interval={{ sysbench_report_interval }}
    --histogram=on
    /usr/share/sysbench/oltp_read_write.lua run
  changed_when: false
  register: sysbench_postgresql_run_output

- name: Stop the PostgreSQL server (Smart Mode)
  tags: ["run_sysbench"]
  become: true
  become_user: "{{ sysbench_postgresql_user }}"
  ansible.builtin.command: >
    /usr/local/pgsql/bin/pg_ctl
    --pgdata={{ sysbench_postgresql_pgdata }}
    --log={{ sysbench_postgresql_logfile }}
    stop
    --mode=smart
    --timeout=6000
  register: _sysbench_postgresql_stop_smart
  changed_when: _sysbench_postgresql_stop_smart != '0'
  retries: 100
  delay: 60
  ignore_errors: true

- name: Stop the PostgreSQL server (Fast Mode)
  tags: ["run_sysbench"]
  become: true
  become_user: "{{ sysbench_postgresql_user }}"
  ansible.builtin.command: >
    /usr/local/pgsql/bin/pg_ctl
    --pgdata={{ sysbench_postgresql_pgdata }}
    --log={{ sysbench_postgresql_logfile }}
    stop
    --mode=fast
  register: _sysbench_postgresql_stop_fast
  changed_when: _sysbench_postgresql_stop_fast != '0'
  retries: 1
  delay: 10
  when:
    - _sysbench_postgresql_stop_smart.rc != 0
  ignore_errors: true

- name: Stop the PostgreSQL server (Immediate Mode)
  tags: ["run_sysbench"]
  become: true
  become_user: "{{ sysbench_postgresql_user }}"
  ansible.builtin.command: >
    /usr/local/pgsql/bin/pg_ctl
    --pgdata={{ sysbench_postgresql_pgdata }}
    --log={{ sysbench_postgresql_logfile }}
    stop
    --mode=immediate
  register: _sysbench_postgresql_stop_immediate
  changed_when: _sysbench_postgresql_stop_immediate != '0'
  retries: 1
  delay: 10
  when:
    - _sysbench_postgresql_stop_fast.rc | default(0) != 0

- name: Write sysbench run output to log file
  tags: ["run_sysbench"]
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.copy:
    content: "{{ sysbench_postgresql_run_output.stdout }}"
    dest: "{{ sysbench_telemetry_path }}/sysbench_tps.txt"
    mode: "0755"

- name: Collect PostgreSQL database cluster control information
  tags: ["logs"]
  become: true
  become_method: sudo
  become_user: "{{ sysbench_postgresql_user }}"
  ansible.builtin.command: >
    /usr/local/pgsql/bin/pg_controldata
    --pgdata={{ sysbench_postgresql_pgdata }}
  register: _sysbench_postgresql_controldata_output
  changed_when: false

- name: Write PostgreSQL database cluster control information to log file
  tags: ["logs"]
  become: true
  become_method: sudo
  become_user: root
  ansible.builtin.copy:
    content: "{{ _sysbench_postgresql_controldata_output.stdout }}"
    dest: "{{ sysbench_postgresql_controldata_logfile }}"
    mode: "0755"
    owner: "{{ sysbench_postgresql_user }}"
    group: "{{ sysbench_postgresql_user }}"
    remote_src: true

- name: Copy telemetry data from each node to the localhost
  tags: ["results"]
  ansible.posix.synchronize:
    src: "{{ sysbench_telemetry_path }}/"
    dest: "{{ topdir_path }}/workflows/sysbench/results/{{ inventory_hostname }}/"
    mode: pull
    recursive: true
    rsync_opts:
      - "--ignore-existing"
  delegate_to: localhost
  become: false

- name: Gather kernel logs from each node
  tags: ["results"]
  become: true
  become_method: sudo
  ansible.builtin.command: journalctl -k
  changed_when: false
  register: journal_cmd

- name: Save kernel logs to local file per node
  tags: ["results"]
  ansible.builtin.copy:
    content: "{{ journal_cmd.stdout }}"
    dest: "{{ topdir_path }}/workflows/sysbench/results/{{ inventory_hostname }}/dmesg.txt"
    mode: "0755"
  delegate_to: localhost

- name: Gather memory fragmentation index on each node
  tags: ["results"]
  become: true
  become_method: sudo
  ansible.builtin.command: cat /sys/kernel/debug/extfrag/extfrag_index
  changed_when: false
  register: extfrag_index_cmd

- name: Save memory fragmentation index per node
  tags: ["results"]
  ansible.builtin.copy:
    content: "{{ extfrag_index_cmd.stdout }}"
    dest: "{{ topdir_path }}/workflows/sysbench/results/{{ inventory_hostname }}/extfrag_index.txt"
    mode: "0755"
  delegate_to: localhost

- name: Gather memory unusable index on each node
  tags: ["results"]
  become: true
  become_method: sudo
  ansible.builtin.command: cat /sys/kernel/debug/extfrag/unusable_index
  changed_when: false
  register: unusable_index_cmd

- name: Save memory unusable index per node
  tags: ["results"]
  ansible.builtin.copy:
    content: "{{ unusable_index_cmd.stdout }}"
    dest: "{{ topdir_path }}/workflows/sysbench/results/{{ inventory_hostname }}/unusable_index.txt"
    mode: "0755"
  delegate_to: localhost

- name: Remove all results and telemetry directories on the node
  tags: ["clean"]
  become: true
  become_flags: "su - -c"
  become_method: sudo
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
    mode: "0755"
  loop:
    - "{{ sysbench_telemetry_path }}/"
  loop_control:
    label: "Removing {{ item }}"

- name: Remove all results and telemetry directories on the host
  tags: ["clean"]
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
    mode: "0755"
  loop:
    - "{{ topdir_path }}/workflows/sysbench/results/"
  delegate_to: localhost

- name: Find directories under sysbench results target
  tags: ["plot"]
  vars:
    sysbench_results_target: "{{ topdir_path }}/workflows/sysbench/results/"
  ansible.builtin.find:
    paths: "{{ sysbench_results_target }}"
    recurse: false
    file_type: directory
  register: sysbench_results_dirs
  delegate_to: localhost

- name: Check if sysbench_tps.txt exists in each directory
  tags: ["plot"]
  vars:
    sysbench_results_target: "{{ topdir_path }}/workflows/sysbench/results/"
  ansible.builtin.stat:
    path: "{{ sysbench_results_target }}/{{ item.path | basename }}/sysbench_tps.txt"
  register: sysbench_tps_exists
  with_items: "{{ sysbench_results_dirs.files }}"
  loop_control:
    label: "Checking sysbench tps output file exists  {{ item.path }}/sysbench_tps.txt"
  delegate_to: localhost

- name: Plot sysbench tps plot for each node
  tags: ["plot"]
  vars:
    sysbench_results_target: "{{ topdir_path }}/workflows/sysbench/results/"
    host_dir: "{{ item.item.path | basename }}"
    output_image: "{{ sysbench_results_target }}{{ host_dir }}/sysbench_tps_plot.png"
  ansible.builtin.command: >
    ./python/workflows/sysbench/sysbench-tps-plot.py
    {{ sysbench_results_target }}/{{ host_dir }}/sysbench_tps.txt
    --output {{ output_image }}
  changed_when: false
  delegate_to: localhost
  with_items: "{{ sysbench_tps_exists.results }}"
  loop_control:
    label: "Generating plot for {{ output_image }}"
  when:
    - "item.stat.exists"

- name: Plot sysbench tps non-atomic Vs atomic
  tags: ["plot"]
  vars:
    sysbench_results_target: "{{ topdir_path }}/workflows/sysbench/results/"
    sysbench_results_target_ab: "{{ sysbench_results_target }}{{ item }}-ab/"
    fs_type: "{{ item | regex_replace('^' + kdevops_host_prefix + '-', '') }}"
    baseline_host: "{{ item }}"
    legend1: "{{ fs_type }} full_page_writes = on"
    file1: "{{ sysbench_results_target }}{{ baseline_host }}/sysbench_tps.txt"
    dev_host: "{{ item }}-dev"
    legend2: "{{ fs_type }} full_page_writes = off"
    file2: "{{ sysbench_results_target }}{{ dev_host }}/sysbench_tps.txt"
    output_image: "{{ sysbench_results_target_ab }}a_vs_b.png"
  ansible.builtin.shell: >
    ./python/workflows/sysbench/sysbench-tps-compare.py
    --legend1 "{{ legend1 }}"
    --legend2 "{{ legend2 }}"
    --output {{ output_image }}
    {{ file1 }} {{ file2 }}
  changed_when: false
  delegate_to: localhost
  with_items:
    - "{{ hostvars[inventory_hostname]['groups']['baseline'] }}"
  when:
    - "kdevops_baseline_and_dev|bool"
    - "sysbench_host_is_baseline|bool"

- name: Plot sysbench TPS variance
  tags: ["plot"]
  vars:
    sysbench_results_target: "{{ topdir_path }}/workflows/sysbench/results/"
    sysbench_results_target_ab: "{{ sysbench_results_target }}{{ item }}-ab/"
    fs_type: "{{ item | regex_replace('^' + kdevops_host_prefix + '-', '') }}"
    legend1: "{{ fs_type }} full_page_writes = on"
    baseline_host: "{{ item }}"
    file1: "{{ sysbench_results_target }}{{ baseline_host }}/sysbench_tps.txt"
    dev_host: "{{ item }}-dev"
    legend2: "{{ fs_type }} full_page_writes = off"
    file2: "{{ sysbench_results_target }}/{{ dev_host }}/sysbench_tps.txt"
  ansible.builtin.shell: >
    ./python/workflows/sysbench/sysbench-tps-variance.py
    --legend1 "{{ legend1 }}"
    --legend2 "{{ legend2 }}"
    --dir {{ sysbench_results_target_ab }}
    {{ file1 }} {{ file2 }}
  changed_when: false
  delegate_to: localhost
  with_items:
    - "{{ hostvars[inventory_hostname]['groups']['baseline'] }}"
  when:
    - "kdevops_baseline_and_dev|bool"
    - "sysbench_host_is_baseline|bool"
